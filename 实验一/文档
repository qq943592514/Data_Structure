广东第二师范学院计算机科学系
实
验
报
告

【课程代号】	* 111122004 *	【课程名称】	数据结构与算法
【实验名称】	线性表及其应用
【实验代码】	11112200401	【实验类型】	验证性
【学    号】		【实验者】	郑科红
【班    级】	18软件工程B
【合 作 者】	
【实验时间】	2019.03.29	【实验场地】		H实711
【指导老师】	刘林东	【综合得分】	
实验报告批阅记录
评分点	学生信息	A实验纪律	B实验质量	C文档质量	D内容质量	合计
分数值		0	20	0	15	0	15	0	50	
成绩						

实验评语	实验纪律	E.其他原因，见下面描述                                          
批阅日期
	实验质量	H.有预习，无法正确回答问题
2018/9/13 15:18

	文档质量	N.实验报告惨不忍睹！！

	内容质量	Q.实验内容完整，实验结果完整，分析总结到位！	批阅老师
其他状况描述	   	刘林东

实验报告文件信息：
文件名：计算机科学系实验报告模板样张(20160406).doc，实验报告撰写人：张渝荣
 
实验一 线性表及其应用
一、实验目的 
	1、掌握用上机调试线性表的基本方法； 
	2、掌握线性表的基本操作，插入、删除、查找，以及线性表在顺序存储结构上的应用。
	   3.  按要求完成实验报告
	
二、实验环境 
硬件：PC 微型计算机、256M以上内存，40G以上硬盘。 
软件：Windows XP，VC或VS.Net

三、实验内容 
1、线性表的定义如下：
import java.lang.reflect.Array;
interface ILinarList<E> {
	boolean add(E item); //添加元素
    boolean add(int index, E item);//插入元素
    E remove(int index); //删除元素
    int indexOf(E item); //定位元素
    E get(int index); //取表元素
    int size(); //求线性表长度
    void clear();//清空线性表
    boolean isEmpty(); //判断线性表是否为空   
}
public class SeqList<E> implements ILinarList<E> {
	private int maxsize; // 顺序表的最大容量
	private E[] data; // 数组，用于存储顺序表中的数据元素
	private int size; // 顺序表的实际长度

	// 初始化线性表
	@SuppressWarnings("unchecked")
	public SeqList(Class<E> type, int maxsize) {
		this.maxsize = maxsize;
		data = (E[]) Array.newInstance(type, maxsize); 
		size = 0;
	}
	// 添加元素，将元素添加在顺序表的末尾
	public boolean add(E item) {
		if (!isFull()) {
			data[size++] = item;
			return true;
		} else
			return false;
	}
	// 插入元素，将元素添加在顺序表指定的位置
	public boolean add(int index, E item) {
		if (index < 0 || index > size)
			throw new IndexOutOfBoundsException("Index: " + index + ", Size: "	+ size);
		if (!isFull()) {
			for (int j = size - 1; j >= index; j--) {
				data[j + 1] = data[j];
			}
			data[index] = item;
			size++;
			return true;
		} else
			return false;
	}
	// 删除元素，删除顺序表的第i个数据元素
	public E remove(int index) {
		rangeCheck(index);
		if (!isEmpty()) {
			E oldValue = data[index];
			for (int j = index; j < size-1; j++) {
				data[j] = data[j+1];
			}
			data[--size] = null;// 清除最后一个元素
			return oldValue;
		} else
			return null;
	}
	// 定位元素，返回对象item在顺序表中首先出现的索引位置，不存在item，则返回-1
	public int indexOf(E item) {
		if (item == null) {
			for (int i = 0; i < size; i++)
				if (data[i] == null)
					return i;
		} else {
			for (int i = 0; i < size; i++)
				if (item.equals(data[i]))
					return i;
		}
		return -1;
	}
	// 取表元素,返回顺序表中指定索引位置index处的数据元素
	public E get(int index) {
		rangeCheck(index);
		return data[index];
	}
	// 求顺序表长度
	public int size() {
		return size;
	}
	// 清空顺序表
	public void clear() {
		for (int i = 0; i < size; i++)
			data[i] = null;
		size = 0;
	}
	// 判断顺序表是否为空
	public boolean isEmpty() {
		return size == 0;
	}
	// 判断给定的索引号是否在指定的范围，如果不在，抛出索引越界异常
	private void rangeCheck(int index) {
		if (index < 0 || index >= size)
			throw new IndexOutOfBoundsException("Index: " + index + ", Size: "
					+ size);
	}
	// 判断顺序表是否为满
	public boolean isFull() {
		if (size == maxsize) {
			return true;
		} else {
			return false;
		}
	}
}
2、利用以上程序，定义一个可以存放学生元素的有序顺序表。
   学生元素中包含两个数据项：姓名、成绩。
   注意顺序表以学生成绩有序存放。
   要求完成一个程序，能添加、删除学生元素，并显示顺序表中所有元素。

四、实验步骤 
1、编写程序，定义学生类Student，记录两个数据项：姓名，成绩。并提供构造函数。
2、编写程序，实现顺序表，初始化顺序表使其具有以下学生：
姓名: M1 分数:68.0
姓名: M2 分数:70.0
姓名: M4 分数:73.0
姓名: M5 分数:76.0
姓名: M7 分数:78.0
姓名: M8 分数:80.0
姓名: M10 分数:83.0
姓名: M12 分数:85.0
姓名: M13 分数:86.0
    姓名: M14 分数:87.0

在此基础上添加三个学生，一个分数为45，一个分数为88，一个分数为75。检查学生添加后顺序表中的学生信息是否还以成绩为序非递减排列。

五、实验小结 
实验过程中的体会和收获。 

六、实验思考题与练习 
以上实验如果采用链式存储结构如何实现？




一、	部分实验代码
 
 
二、实验小结 
如果一个数据元素序列满足：
除第一个和最后一个数据元素外，每个数据元素都只有一个前驱数据元素和一个后继数据元素；
第一个数据元素没有前驱数据元素；
最后一个数据元素没有后继数据元素；
则称这样的数据结构为线性结构。线性表、堆栈、队列、串和数组都属于线性结构。 
线性表是一种可以在任意位置进行插入和删除数据元素操作的、由n（n>=0）个相同类型数据元素a0,a1,a2,a3…..an-1组成的线性结构。

顺序表的主要特点是：
在顺序表插入和删除一个数据元素成员的时间复杂度为O(n)。
顺序表支持随机读取，因此，顺序表读取数据元素的时间复杂度为O(1)。
顺序表的主要优点是：支持随机读取，以及内存空间利用效率高。
顺序表的主要缺点是：需要预先给出数组的最大数据元素个数，但数组的最大元素个数很难准确给出。另外，插入和删除操作时需要移动较多的数据元素。

首先设计一个线性表接口List，线性表接口List给出了任何实现线性表功能的类中必须要实现的成员函数原型，这有两方面的作用：一方面，设计基础软件模块（如顺序表类和单链表类等）的设计者，可以根据接口List规范的成员函数（包括成员函数的访问权限，成员函数名，成员函数的返回类型，每个参数的参数类型）来实现成员函数，这样，凡是实现接口List的类，无论是顺序表类还是单链表类，只是实现操作的具体方法不同，所实现的功能和调用的形式都相同；另一方面，使用基础软件模块（如顺序表类和单链表类等）的使用者在定义了对象后，可以根据接口List规范的成员函数原型来调用成员函数。因此可以说，线性表接口List定义了实现该接口类的外部公共接口。
实现顺序存储结构的方法是使用数组。数组将顺序表的数据元素存储在一块连续地址的内存单元中。
三、实验思考题与练习
线性表的链式存储结构的特点是用一组任意的存储单元来存储线性表的数据元素，这些单元可以分散在内存中的任意位置上，其在物理上可以是连续的，也可以是不连续的。具有链式存储结构的线性表称为线性链表。为了表示出每个数据元素与其后继之间的关系，除了存储数据元素本身的信息之外，还需存储指示其直接后继的信息。这可以用一个结点（node）来完整的表示。将节点中存储数据元素本身信息的域称为数据域；存储其直接后继位置的域称为指针域。指针域中存储的信息称作指针或链。一般情况下，链表中每个结点可以包含若干个数据域和若干个指针域。如果每个结点中只包含一个指针域，则称其为单链表。  　　为了便于实现各种操作，可以在单链表的第一个结点之前增设一个结点，称为头结点，其他结点称为表结点。
链式存储结构及实现：对于链式结构而言，由于程序需要从rear端添加元素，然后从front端删除元素，因此考虑对链队列增加front、rear两个引用变量，使他们分别指向链队列的头、尾两个节点。 由于链队列采用链式存储结构保存数据元素，该队列允许添加无限多个数据元素，因此链队列不会出现列满的问题。
1、插入队列
对于链队列而言，插入操作的实现非常简单，只要创建一个新节点，让原rear节点的next指向新节点，在让rear指向新节点即可。
2、移除队列
对于链队列而言，删除操作的实现也是非常的简单，只要将原front节点指向原front节点的next节点，当然不要忘记释放原front节点的引用。
